# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protos.generated.editor_pb2 as editor__pb2


class EditorStub(object):
    """The editing service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendCommand = channel.unary_unary(
                '/editor.Editor/SendCommand',
                request_serializer=editor__pb2.Command.SerializeToString,
                response_deserializer=editor__pb2.CommandStatus.FromString,
                )
        self.Notify = channel.unary_unary(
                '/editor.Editor/Notify',
                request_serializer=editor__pb2.NodeInfo.SerializeToString,
                response_deserializer=editor__pb2.NotifyResponse.FromString,
                )
        self.RequestContent = channel.unary_unary(
                '/editor.Editor/RequestContent',
                request_serializer=editor__pb2.FileInfo.SerializeToString,
                response_deserializer=editor__pb2.Content.FromString,
                )
        self.RequestLog = channel.unary_stream(
                '/editor.Editor/RequestLog',
                request_serializer=editor__pb2.FileInfo.SerializeToString,
                response_deserializer=editor__pb2.Command.FromString,
                )
        self.AreYouReady = channel.unary_unary(
                '/editor.Editor/AreYouReady',
                request_serializer=editor__pb2.SyncConfirmation.SerializeToString,
                response_deserializer=editor__pb2.SyncConfirmation.FromString,
                )


class EditorServicer(object):
    """The editing service definition.
    """

    def SendCommand(self, request, context):
        """Sends a command
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Notify(self, request, context):
        """Notifies a new node connection
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestContent(self, request, context):
        """Request the content of the file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestLog(self, request, context):
        """Request the log of the file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AreYouReady(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EditorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.SendCommand,
                    request_deserializer=editor__pb2.Command.FromString,
                    response_serializer=editor__pb2.CommandStatus.SerializeToString,
            ),
            'Notify': grpc.unary_unary_rpc_method_handler(
                    servicer.Notify,
                    request_deserializer=editor__pb2.NodeInfo.FromString,
                    response_serializer=editor__pb2.NotifyResponse.SerializeToString,
            ),
            'RequestContent': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestContent,
                    request_deserializer=editor__pb2.FileInfo.FromString,
                    response_serializer=editor__pb2.Content.SerializeToString,
            ),
            'RequestLog': grpc.unary_stream_rpc_method_handler(
                    servicer.RequestLog,
                    request_deserializer=editor__pb2.FileInfo.FromString,
                    response_serializer=editor__pb2.Command.SerializeToString,
            ),
            'AreYouReady': grpc.unary_unary_rpc_method_handler(
                    servicer.AreYouReady,
                    request_deserializer=editor__pb2.SyncConfirmation.FromString,
                    response_serializer=editor__pb2.SyncConfirmation.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'editor.Editor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Editor(object):
    """The editing service definition.
    """

    @staticmethod
    def SendCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/editor.Editor/SendCommand',
            editor__pb2.Command.SerializeToString,
            editor__pb2.CommandStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Notify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/editor.Editor/Notify',
            editor__pb2.NodeInfo.SerializeToString,
            editor__pb2.NotifyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/editor.Editor/RequestContent',
            editor__pb2.FileInfo.SerializeToString,
            editor__pb2.Content.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/editor.Editor/RequestLog',
            editor__pb2.FileInfo.SerializeToString,
            editor__pb2.Command.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AreYouReady(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/editor.Editor/AreYouReady',
            editor__pb2.SyncConfirmation.SerializeToString,
            editor__pb2.SyncConfirmation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
